实验用机为mac air，8g内存，JDK8

使用GCLogAnalysis.java演练串行/并行/CMS/G1的案例
1.串行GC
（1）指定“-Xms512m -Xmx512m”，没有发生full gc，回收器执行效率比较高，young gc执行耗时中位数40毫秒；
（2）指定“-Xms2g -Xmx2g”，没有发生full gc，只发生少量young gc，回收器执行效率较（1）相差不大，young gc执行耗时中位数70毫秒；
（3）指定“-Xms4g -Xmx4g”，没有发生full gc，只发生1次young gc，回收器执行效率较（1）中有明显下降，young gc执行耗时中位数100毫秒；
（4）指定“-Xms256m -Xmx256m”，执行后期全是full gc，回收器执行效率较（1）中有明显下降，full gc执行耗时中位数40毫秒；
2.并行GC
（1）指定“-Xms512m -Xmx512m”，发生较多young gc，几次full gc，回收器执行效率较串行GC（1）有轻微下降，原因可能是尽管并行GC采用多线程执行垃圾回收，但在此配置下full gc影响了执行效率，full gc执行耗时中位数140毫秒；
（2）指定“-Xms2g -Xmx2g”，没有发生full gc，只发生少量young gc，此时并行GC体现出了优势，较串行GC、（1）的效率有明显提升，young gc执行耗时中位数80毫秒；
（3）指定“-Xms4g -Xmx4g”，没有发生full gc，只发生1次young gc，较（2）的效率有轻微下降，young gc执行耗时中位数120毫秒，空间大收集效率有影响；
（4）指定“-Xms256m -Xmx256m”，执行后期全是full gc，回收器执行效率较（1）中有明显下降，且比串行GC（4）效率要低（full gc耗时更长），full gc执行耗时中位数100毫秒；
3.CMS GC
（1）指定“-Xms512m -Xmx512m”，效率比串行GC（1）、并行GC（1）略好；
（2）指定“-Xms2g -Xmx2g”，效率与（1）相当；
（3）指定“-Xms4g -Xmx4g”，效率与（1）相当；
（4）指定“-Xms256m -Xmx256m”，效率比并行GC（4）略好；
4.G1 GC
（1）指定“-Xms512m -Xmx512m”，效率与串行GC（1）、并行GC（1）差不多；
（2）指定“-Xms2g -Xmx2g”，效率与串行GC（1）、并行GC（1）差不多；
（3）指定“-Xms4g -Xmx4g”，比CMS GC（3）要略好；
（4）指定“-Xms256m -Xmx256m”，唯一一个报out of memory的，低内存不适合G1 GC；
如果不设置Xms，应用只会申请一小部分的内存，当堆内存使用达到峰值，会进行GC而不会重新申请（影响了效率）。当应用运行一段时间，堆内存最低水位会逐渐抬高，直到到达Xmx设置阀值。

使用压测工具（wrk或sb），演练gateway-server-0.0.1-SNAPSHOT.jar示例
与上面案例测试的case一致，在各种配置下，随着请求数量的增加，串行GC有着明显的性能劣势，其他类型GC在性能达到瓶颈前处理效率差异不大。
